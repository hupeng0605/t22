/**
* Copyright (C) 2009， 
* All rights reserved.
*
* 文件名称: KLock.h
* 摘    要: 线程锁
*
* 当前版本: 1.0
* 作    者:  
* 完成日期: 2009-12-11
*
* 修改历史：
* [修改序列]    [修改日期]      [修改者]        [修改内容]
*   1                   2009-12-11             创建
*
**/


#pragma once

#include "Configure.h"

//***************************************************************
// *  功　　能: 互斥体
// *  作　　者:  
// *  日　　期: 2010-01-11
//***************************************************************
class /*CYPRESS_DLL_API*/ HCMutex
{
private:
    CRITICAL_SECTION m_section;// 临界区
    bool m_bLock;// 是否已经加锁临界区标识符
public:

    //***************************************************************
    // *  功　　能: 构造函数
    // *  入口参数:
    // *  出口参数:
    // *  返 回 值:
    // *  作　　者:  
    // *  日　　期: 2010-01-11
    //***************************************************************
    HCMutex(): m_bLock(false)
    {
        // 初始化一个临界区
        ::InitializeCriticalSection(&m_section);
    }

    //***************************************************************
    // *  功　　能:  析构函数
    // *  入口参数:
    // *  出口参数:
    // *  返 回 值:
    // *  作　　者:   
    // *  日　　期:  2010-01-11
    //***************************************************************
    ~HCMutex()
    {
        if (m_bLock)
        {
            Unlock();// 如果临界区被占用，则先释放占用资源
        }

        // 释放一个没有被占有的临界区对象的所有资源
        ::DeleteCriticalSection(&m_section);
    }

    //***************************************************************
    // *  功　　能: 加锁
    // *  入口参数:
    // *  出口参数:
    // *  返 回 值:
    // *  作　　者:  
    // *  日　　期: 2010-01-11
    //***************************************************************
    void Lock()
    {
        ::EnterCriticalSection(&m_section);
        m_bLock = true;
    }

    //***************************************************************
    // *  功　　能: 解锁
    // *  入口参数:
    // *  出口参数:
    // *  返 回 值:
    // *  作　　者:  
    // *  日　　期: 2010-01-11
    //***************************************************************
    void Unlock()
    {
        ::LeaveCriticalSection(&m_section);
        m_bLock = false;
    }
    //
    operator const LPCRITICAL_SECTION()
    {
        return &m_section;
    }
};

//***************************************************************
// *  功　　能: 线程锁
// *  入口参数:
// *  出口参数:
// *  返 回 值:
// *  作　　者:  
// *  日　　期: 2010-01-11
//***************************************************************
class /*CYPRESS_DLL_API*/ KCLock
{
private:
    HCMutex* m_pMutex;// 互斥体

public:

    //***************************************************************
    // *  功　　能: 构造函数
    // *  入口参数:KCMutex*：互斥体指针
    // *  出口参数:无
    // *  返 回 值:无
    // *  作　　者:  
    // *  日　　期: 2010-01-11
    //***************************************************************
    KCLock(IN HCMutex *pMutex):
            m_pMutex(pMutex)
    {
        m_pMutex->Lock();
    }

    //***************************************************************
    // *  功　　能: 析构函数（如果忘记解锁，则自动解锁）
    // *  入口参数: 无
    // *  出口参数: 无
    // *  返 回 值: 无
    // *  作　　者:  
    // *  日　　期: 2010-01-11
    //***************************************************************
    ~KCLock()
    {
        Unlock();// 保证在其作用域外是解锁状态，避免死锁
    }

    //***************************************************************
    // *  功　　能: 解锁
    // *  入口参数: 无
    // *  出口参数: 无
    // *  返 回 值: 无
    // *  作　　者:  
    // *  日　　期: 2010-01-11
    //***************************************************************
    void Unlock()
    {
        if (m_pMutex)
        {
            m_pMutex->Unlock();
        }
    }
};
